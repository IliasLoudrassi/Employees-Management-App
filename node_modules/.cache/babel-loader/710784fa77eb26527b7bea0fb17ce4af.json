{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { getFakeLastname, getFakeName } from \"./utils\";\n\nconst generateHourlyRate = () => {\n  return Math.floor(Math.random() * (10 - 6 + 1)) + 6;\n};\n\nconst generateWorkedHours = () => {\n  return Math.floor(Math.random() * (14 - 0 + 1));\n};\n\nexport const calculateDailySalary = (hourlyRate, totalWorkedHours, date) => {\n  if (getIsWeekend(new Date())) {}\n\n  let dailySalary = 0;\n\n  if (totalWorkedHours <= 8 && totalWorkedHours > 0) {\n    if (totalWorkedHours === 8) {\n      dailySalary = hourlyRate.standard * 8;\n    }\n\n    if (totalWorkedHours < 8) {\n      dailySalary = hourlyRate.standard * (8 - (8 - totalWorkedHours));\n    }\n  }\n\n  if (totalWorkedHours > 8) {\n    dailySalary = hourlyRate.standard * 8 + hourlyRate.extra * (totalWorkedHours - 8);\n  }\n\n  return dailySalary;\n};\n\nconst getFirstDayOfWeek = date => {\n  const day = date.getDay(),\n        diff = date.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\nconst getIsWeekend = date => {\n  if (date.getDay() == 6 || date.getDay() == 0) {\n    return true;\n  }\n\n  return false;\n};\n\nconst generateTimesheets = (numberOfTimeSheets, hourlyRate) => {\n  let timesheets = [];\n  let firstDayOfWeek = getFirstDayOfWeek(new Date());\n\n  for (let i = 0; i < numberOfTimeSheets; i++) {\n    let daysOfWeek = [];\n\n    for (let j = 0; j < 7; j++) {\n      const dateTemp = new Date(firstDayOfWeek);\n      const totalWorkedHours = generateWorkedHours();\n      const dayOfWeek = {\n        dayId: uuidv4(),\n        dayName: dateTemp.toLocaleString(\"en-us\", {\n          weekday: \"long\"\n        }),\n        totalWorkedHours: totalWorkedHours,\n        extraHours: totalWorkedHours > 8 ? totalWorkedHours - 8 : 0,\n        totalSalary: calculateDailySalary(hourlyRate, totalWorkedHours, dateTemp),\n        date: dateTemp\n      };\n      console.log(dayOfWeek.dayName);\n      daysOfWeek = [...daysOfWeek, dayOfWeek];\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n\n    const timesheet = {\n      listOfDays: daysOfWeek,\n      timesheetId: uuidv4()\n    };\n    timesheets = [...timesheets, timesheet];\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 14);\n  }\n\n  return timesheets;\n};\n\nexport const generateEmployee = numberOfWeeks => {\n  const generatedHourlyRate = generateHourlyRate();\n  const hourlyRate = {\n    standard: generatedHourlyRate,\n    extra: generatedHourlyRate * 2\n  };\n  const employee = {\n    employeeId: uuidv4(),\n    employeeName: getFakeName(),\n    employeeLastName: getFakeLastname(),\n    hourlyRate: hourlyRate,\n    timesheets: generateTimesheets(numberOfWeeks, hourlyRate)\n  };\n  return employee;\n};","map":{"version":3,"sources":["/Users/ilyassloudrassi/Desktop/Employees-Management-App/Employees-Management-App/src/Data/dataGenerator.ts"],"names":["v4","uuidv4","getFakeLastname","getFakeName","generateHourlyRate","Math","floor","random","generateWorkedHours","calculateDailySalary","hourlyRate","totalWorkedHours","date","getIsWeekend","Date","dailySalary","standard","extra","getFirstDayOfWeek","day","getDay","diff","getDate","setDate","generateTimesheets","numberOfTimeSheets","timesheets","firstDayOfWeek","i","daysOfWeek","j","dateTemp","dayOfWeek","dayId","dayName","toLocaleString","weekday","extraHours","totalSalary","console","log","timesheet","listOfDays","timesheetId","generateEmployee","numberOfWeeks","generatedHourlyRate","employee","employeeId","employeeName","employeeLastName"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport {\n  DayOfWeek,\n  Employee,\n  HourlyRate,\n  Timesheet,\n} from \"../Types/EmployeeType\";\nimport { getFakeLastname, getFakeName } from \"./utils\";\n\nconst generateHourlyRate = () => {\n  return Math.floor(Math.random() * (10 - 6 + 1)) + 6;\n};\n\nconst generateWorkedHours = () => {\n  return Math.floor(Math.random() * (14 - 0 + 1));\n};\n\nexport const calculateDailySalary = (\n  hourlyRate: HourlyRate,\n  totalWorkedHours: number,\n  date: Date\n): number => {\n  if (getIsWeekend(new Date())) {\n  }\n  let dailySalary = 0;\n  if (totalWorkedHours <= 8 && totalWorkedHours > 0) {\n    if (totalWorkedHours === 8) {\n      dailySalary = hourlyRate.standard * 8;\n    }\n    if (totalWorkedHours < 8) {\n      dailySalary = hourlyRate.standard * (8 - (8 - totalWorkedHours));\n    }\n  }\n\n  if (totalWorkedHours > 8) {\n    dailySalary =\n      hourlyRate.standard * 8 + hourlyRate.extra * (totalWorkedHours - 8);\n  }\n  return dailySalary;\n};\n\nconst getFirstDayOfWeek = (date: Date) => {\n  const day = date.getDay(),\n    diff = date.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\nconst getIsWeekend = (date: Date) => {\n  if (date.getDay() == 6 || date.getDay() == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst generateTimesheets = (\n  numberOfTimeSheets: number,\n  hourlyRate: HourlyRate\n): Timesheet[] => {\n  let timesheets: Timesheet[] = [];\n  let firstDayOfWeek: Date = getFirstDayOfWeek(new Date());\n  for (let i = 0; i < numberOfTimeSheets; i++) {\n    let daysOfWeek: DayOfWeek[] = [];\n    for (let j = 0; j < 7; j++) {\n      const dateTemp = new Date(firstDayOfWeek);\n      const totalWorkedHours = generateWorkedHours();\n      const dayOfWeek: DayOfWeek = {\n        dayId: uuidv4(),\n        dayName: dateTemp.toLocaleString(\"en-us\", { weekday: \"long\" }),\n        totalWorkedHours: totalWorkedHours,\n        extraHours: totalWorkedHours > 8 ? totalWorkedHours - 8 : 0,\n        totalSalary: calculateDailySalary(\n          hourlyRate,\n          totalWorkedHours,\n          dateTemp\n        ),\n        date: dateTemp,\n      };\n      console.log(dayOfWeek.dayName);\n      daysOfWeek = [...daysOfWeek, dayOfWeek];\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n    const timesheet: Timesheet = {\n      listOfDays: daysOfWeek,\n      timesheetId: uuidv4(),\n    };\n    timesheets = [...timesheets, timesheet];\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 14);\n  }\n  return timesheets;\n};\n\nexport const generateEmployee = (numberOfWeeks: number): Employee => {\n  const generatedHourlyRate = generateHourlyRate();\n  const hourlyRate: HourlyRate = {\n    standard: generatedHourlyRate,\n    extra: generatedHourlyRate * 2,\n  };\n  const employee: Employee = {\n    employeeId: uuidv4(),\n    employeeName: getFakeName(),\n    employeeLastName: getFakeLastname(),\n    hourlyRate: hourlyRate,\n    timesheets: generateTimesheets(numberOfWeeks, hourlyRate),\n  };\n\n  return employee;\n};\n"]},"metadata":{},"sourceType":"module"}