{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { getFakeLastname, getFakeName } from \"./utils\";\n\nconst generateHourlyRate = () => {\n  return Math.floor(Math.random() * (10 - 6 + 1)) + 6;\n};\n\nconst generateWorkedHours = () => {\n  return Math.floor(Math.random() * (14 - 0 + 1));\n};\n\nconst calculateDailySalary = (hourlyRate, totalWorkedHours) => {\n  let dailySalary = 0;\n\n  if (totalWorkedHours <= 8 && totalWorkedHours > 0) {\n    dailySalary = hourlyRate.standard * 8;\n  }\n\n  if (totalWorkedHours > 8) {\n    dailySalary += hourlyRate.extra * (totalWorkedHours - 8);\n  }\n\n  return dailySalary;\n};\n\nconst getFirstDayOfWeek = date => {\n  const day = date.getDay(),\n        diff = date.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\nconst generateTimesheets = (numberOfTimeSheets, hourlyRate) => {\n  let timesheets = [];\n  let firstDayOfWeek = getFirstDayOfWeek(new Date());\n\n  for (let i = 0; i < numberOfTimeSheets; i++) {\n    let daysOfWeek = [];\n\n    for (let j = 0; j < 7; j++) {\n      const dateTemp = new Date(firstDayOfWeek);\n      const totalWorkedHours = generateWorkedHours();\n      const dayOfWeek = {\n        dayId: uuidv4(),\n        dayName: dateTemp.toLocaleString(\"en-us\", {\n          weekday: \"long\"\n        }),\n        totalWorkedHours: totalWorkedHours,\n        extraHours: totalWorkedHours > 8 ? totalWorkedHours - 8 : 0,\n        totalSalary: calculateDailySalary(hourlyRate, totalWorkedHours),\n        date: dateTemp\n      };\n      daysOfWeek = [...daysOfWeek, dayOfWeek];\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n\n    const timesheet = {\n      listOfDays: daysOfWeek,\n      timesheetId: uuidv4()\n    };\n    timesheets = [...timesheets, timesheet];\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 14);\n  }\n\n  return timesheets;\n};\n\nexport const generateEmployee = numberOfWeeks => {\n  const generatedHourlyRate = generateHourlyRate();\n  const hourlyRate = {\n    standard: generatedHourlyRate,\n    extra: generatedHourlyRate * 2\n  };\n  const employee = {\n    employeeId: uuidv4(),\n    employeeName: getFakeName(),\n    employeeLastName: getFakeLastname(),\n    hourlyRate: hourlyRate,\n    timesheets: generateTimesheets(numberOfWeeks, hourlyRate)\n  }; // console.log(employee);\n\n  return employee;\n};","map":{"version":3,"sources":["/Users/ilyassloudrassi/Desktop/Employees-Management-App/Employees-Management-App/src/Data/dataGenerator.ts"],"names":["v4","uuidv4","getFakeLastname","getFakeName","generateHourlyRate","Math","floor","random","generateWorkedHours","calculateDailySalary","hourlyRate","totalWorkedHours","dailySalary","standard","extra","getFirstDayOfWeek","date","day","getDay","diff","getDate","Date","setDate","generateTimesheets","numberOfTimeSheets","timesheets","firstDayOfWeek","i","daysOfWeek","j","dateTemp","dayOfWeek","dayId","dayName","toLocaleString","weekday","extraHours","totalSalary","timesheet","listOfDays","timesheetId","generateEmployee","numberOfWeeks","generatedHourlyRate","employee","employeeId","employeeName","employeeLastName"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport {\n  DayOfWeek,\n  Employee,\n  HourlyRate,\n  Timesheet,\n} from \"../Types/EmployeeType\";\nimport { getFakeLastname, getFakeName } from \"./utils\";\n\nconst generateHourlyRate = () => {\n  return Math.floor(Math.random() * (10 - 6 + 1)) + 6;\n};\n\nconst generateWorkedHours = () => {\n  return Math.floor(Math.random() * (14 - 0 + 1));\n};\n\nconst calculateDailySalary = (\n  hourlyRate: HourlyRate,\n  totalWorkedHours: number\n) => {\n  let dailySalary = 0;\n  if (totalWorkedHours <= 8 && totalWorkedHours > 0) {\n    dailySalary = hourlyRate.standard * 8;\n  }\n  if (totalWorkedHours > 8) {\n    dailySalary += hourlyRate.extra * (totalWorkedHours - 8);\n  }\n  return dailySalary;\n};\n\nconst getFirstDayOfWeek = (date: Date) => {\n  const day = date.getDay(),\n    diff = date.getDate() - day + (day === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\nconst generateTimesheets = (\n  numberOfTimeSheets: number,\n  hourlyRate: HourlyRate\n): Timesheet[] => {\n  let timesheets: Timesheet[] = [];\n  let firstDayOfWeek: Date = getFirstDayOfWeek(new Date());\n  for (let i = 0; i < numberOfTimeSheets; i++) {\n    let daysOfWeek: DayOfWeek[] = [];\n    for (let j = 0; j < 7; j++) {\n      const dateTemp = new Date(firstDayOfWeek);\n      const totalWorkedHours = generateWorkedHours();\n      const dayOfWeek: DayOfWeek = {\n        dayId: uuidv4(),\n        dayName: dateTemp.toLocaleString(\"en-us\", { weekday: \"long\" }),\n        totalWorkedHours: totalWorkedHours,\n        extraHours: totalWorkedHours > 8 ? totalWorkedHours - 8 : 0,\n        totalSalary: calculateDailySalary(hourlyRate, totalWorkedHours),\n        date: dateTemp,\n      };\n      daysOfWeek = [...daysOfWeek, dayOfWeek];\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n    const timesheet: Timesheet = {\n      listOfDays: daysOfWeek,\n      timesheetId: uuidv4(),\n    };\n    timesheets = [...timesheets, timesheet];\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 14);\n  }\n  return timesheets;\n};\n\nexport const generateEmployee = (numberOfWeeks: number): Employee => {\n  const generatedHourlyRate = generateHourlyRate();\n  const hourlyRate: HourlyRate = {\n    standard: generatedHourlyRate,\n    extra: generatedHourlyRate * 2,\n  };\n  const employee: Employee = {\n    employeeId: uuidv4(),\n    employeeName: getFakeName(),\n    employeeLastName: getFakeLastname(),\n    hourlyRate: hourlyRate,\n    timesheets: generateTimesheets(numberOfWeeks, hourlyRate),\n  };\n  // console.log(employee);\n  return employee;\n};\n"]},"metadata":{},"sourceType":"module"}